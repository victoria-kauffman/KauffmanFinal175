#pragma kernel twiddleFactAndInputs
#pragma kernel horFFT
#pragma kernel verFFT
#pragma kernel horInvFFT
#pragma kernel verInvFFT
#pragma kernel scale
#pragma kernel perm


#include "Assets/ComputeShaders/Math/Functions.cginc"

static const float PI = 3.1415926535897;

RWTexture2D<float4> PrecomputeBuffer;
RWTexture2D<float2> Buffer0, Buffer1;

Texture2D<float4> PrecomputedData;

bool SwitchBool;
uint Size, Step;

float2 cexp(float2 a) {
    return float2(cos(a.y), sin(a.y)) * exp(a.x);
}

[numthreads(1, 8, 1)]
void twiddleFactAndInputs(uint3 id : SV_DispatchThreadID) {
    uint b = Size >> (id.x + 1);
    uint i = (2 * b * (id.y / b) + id.y % b) % Size;

    float2 m = 2 * PI * float2(0, 1) / Size;

    float2 twiddle = cexp(-m * ((id.y / b) * b));

	PrecomputeBuffer[id.xy] = float4(twiddle.x, twiddle.y, i, i + b);
	PrecomputeBuffer[uint2(id.x, id.y + Size / 2)] = float4(-twiddle.x, -twiddle.y, i, i + b);
}

void FFTCompute(uint3 id, bool isInv, bool isVert) {
    float4 data = (isVert) ? PrecomputedData[uint2(Step, id.y)]
                           : PrecomputedData[uint2(Step, id.x)];

    float2 a;
    if (isInv) {
        a = float2(data.r, -data.g);
    } else {
        a = data.rg;
    }

    uint2 input = (uint2) data.ba;

    uint2 indexA, indexB;

    if (isVert) {
        indexA = uint2(id.x, input.x);
        indexB = uint2(id.x, input.y);
    } else {
        indexA = uint2(input.x, id.y);
        indexB = uint2(input.y, id.y);
    }

    if (SwitchBool) {
        Buffer1[id.xy] = Buffer0[indexA]
                         + cmult(a, Buffer0[indexB]);
    } else {
        Buffer0[id.xy] = Buffer1[indexA]
                    + cmult(a, Buffer1[indexB]);
    }
}

[numthreads(8, 8, 1)]
void horFFT (uint3 id : SV_DispatchThreadID) {
    FFTCompute(id, false, false);
}

[numthreads(8, 8, 1)]
void verFFT (uint3 id : SV_DispatchThreadID) {
    FFTCompute(id, false, true);
}

[numthreads(8, 8, 1)]
void horInvFFT (uint3 id : SV_DispatchThreadID) {
    FFTCompute(id, true, false);
}

[numthreads(8, 8, 1)]
void verInvFFT (uint3 id : SV_DispatchThreadID) {
    FFTCompute(id, true, true);
}

[numthreads(8, 8, 1)]
void scale(uint3 id : SV_DispatchThreadID) {
    Buffer0[id.xy] /= (Size * Size);
}

[numthreads(8, 8, 1)]
void perm(uint3 id : SV_DispatchThreadID) {
    Buffer0[id.xy] *= (1.0 - 2.0 * ((id.x + id.y) % 2)); 
}